name: pak and push

on:
  push:
    branches:
      - master
      - ci
  workflow_dispatch:
      
jobs:
  build:
    runs-on: self-hosted
    env:
      MOD_REF: ${{ github.event.repository.name }}
    steps:
    
      - name: Print mod reference
        run: echo "${{ env.MOD_REF }}"

      - name: Alpakit
        run: |
          $uproject=@"
          "${{ secrets.PROJDIR }}/FactoryGame.uproject"
          "@
          $run=@"
          "${{ secrets.UE4DIR }}/Engine/Build/BatchFiles/RunUAT.bat" -ScriptsForProject=$uproject PackagePlugin -Project=$uproject -PluginName="${{ env.MOD_REF }}"
          "@
          iex "& $run"

      - name: Optimize and write zipped mod contents
        run: |
          from zipfile import ZIP_DEFLATED
          from zopfli import ZipFile #upm package(zopflipy)
          
          modzip = '${{ secrets.PROJDIR }}/Saved/ArchivedPlugins/WindowsNoEditor/${{ env.MOD_REF }}.zip'
          
          with ZipFile("${{ env.MOD_REF }}.zip", 'w', ZIP_DEFLATED, True) as zw:
            with ZipFile(modzip) as zr:
              ifl = zr.infolist()
              for i in range(0, len(ifl)):
                zi = ifl[i]
                print(
                  f"Name: {zi.filename}",
                  f"Size: {zi.file_size} bytes",
                  f"File {i+1} of {len(ifl)}",
                  sep='\n', end=' ... '
                )

                zw.writestr(zi, zr.read(zi))

            print("Items:\n", "\t\n".join(zw.namelist()))
            
          print("Operation Complete.")
        shell: python
      
      - name: Release zipped mod contents
        if: ($(( github.ref_type }} == "branch") && (${{ github.ref_name }} == "master")
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: false
          title: "Latest Release"
          files: ${{ env.MOD_REF }}.zip

  status:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: build
    env:
      MOD_REF: ${{ github.event.repository.name }}
    steps:  
      - name: Build Success
        if: ${{ success() }} 
        run: |
          curl -s -H "Content-Type: application/json" -d '{"embeds": [{"title": "${{ env.MOD_REF }} Build Success!", "color": 65280}]}' '${{ secrets.WEBHOOKS }}'
        
      - name: Build Failure
        if: ${{ failure() }} 
        run: |
          curl -s -H "Content-Type: application/json" -d '{"embeds": [{"title": "${{ env.MOD_REF }} Build Failure!", "color": 16711680}]}' '${{ secrets.WEBHOOKS }}'
  
